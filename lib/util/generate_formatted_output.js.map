{"version":3,"sources":["../../src/util/generate_formatted_output.js"],"names":["FormatDurationOutputIntervals","durationTimestampInput","formatting","positive","Number","durationTimestamp","intervals","interval","length","initVal","remainderDuration","moment","duration","lastInterval","results","outputResult","reduce","acc","selectedIntervalValue","availableIntervalDuration","as","decimalPlaces","notation","precision","subtract","join"],"mappings":";;;;;;;;AAAA;;;;AACA;;AACA;;;;;;AAEA,IAAMA,gCAAgC,CAAC,MAAD,EAAS,OAAT,EAAkB,MAAlB,EAA0B,KAA1B,EAAiC,MAAjC,EAAyC,QAAzC,EAAmD,QAAnD,CAAtC;;kBACe,UAACC,sBAAD,EAAyBC,UAAzB,EAAwC;AACrD,MAAMC,WAAWC,OAAOH,sBAAP,KAAkC,CAAnD;AACA,MAAMI,oBAAoB,iBAAID,OAAOH,sBAAP,CAAJ,CAA1B;AACA,MAAMK,YAAY,0BAChBN,6BADgB,EAEhB,oBAAOE,WAAWK,QAAlB,EAA4B;AAAA,WAAY,sBAASP,6BAAT,EAAwCO,QAAxC,CAAZ;AAAA,GAA5B,CAFgB,CAAlB;AAIA,MAAID,UAAUE,MAAV,KAAqB,CAAzB,EAA4B;AAC1B,WAAOH,iBAAP;AACD;AACD,MAAMI,UAAU;AACdC,uBAAmBC,iBAAOC,QAAP,CAAgBP,iBAAhB,CADL;AAEdQ,kBAAc,kBAAKP,SAAL,CAFA;AAGdJ,0BAHc;AAIdY,aAAS;AAJK,GAAhB;AAMA,MAAMC,eAAeT,UAAUU,MAAV,CAAiB,UAACC,GAAD,EAAMV,QAAN,EAAmB;AACvD,QAAIW,8BAAJ;AACA,QAAIX,aAAaU,IAAIJ,YAArB,EAAmC;AACjC,UAAMM,4BAA4BF,IAAIP,iBAAJ,CAAsBU,EAAtB,CAAyBb,QAAzB,CAAlC;AACA,UAAIU,IAAIf,UAAJ,CAAemB,aAAf,KAAiC,CAAC,CAAtC,EAAyC;AACvCH,gCAAwBd,OAAO,oBAC7Be,yBAD6B,EAE7B,EAAEG,UAAU,OAAZ,EAAqBC,WAAW,CAAhC,EAF6B,CAAP,CAAxB;AAID,OALD,MAKO,IAAIN,IAAIf,UAAJ,CAAemB,aAAf,KAAiC,CAArC,EAAwC;AAC7CH,gCAAwB,mBAAMC,yBAAN,CAAxB;AACD,OAFM,MAEA;AACLD,gCAAwB,oBAAOC,yBAAP,EAAkC;AACxDG,oBAAU,OAD8C;AAExDC,qBAAWN,IAAIf,UAAJ,CAAemB;AAF8B,SAAlC,CAAxB;AAID;AACF,KAfD,MAeO;AACLH,8BAAwB,mBAAMD,IAAIP,iBAAJ,CAAsBU,EAAtB,CAAyBb,QAAzB,CAAN,CAAxB;AACD;AACD,wBACKU,GADL;AAEEP,yBAAmBO,IAAIP,iBAAJ,CAAsBc,QAAtB,CAA+BN,qBAA/B,EAAsDX,QAAtD,CAFrB;AAGEO,4CACKG,IAAIH,OADT,IAEKI,qBAFL,SAE8BX,QAF9B;AAHF;AAQD,GA5BoB,EA4BlBE,OA5BkB,CAArB;AA6BA,SAAON,WAAWY,aAAaD,OAAb,CAAqBW,IAArB,CAA0B,GAA1B,CAAX,UAAiDV,aAAaD,OAAb,CAAqBW,IAArB,CAA0B,GAA1B,CAAjD,MAAP;AACD,C","file":"generate_formatted_output.js","sourcesContent":["import moment from 'moment';\nimport { format, floor, round, abs } from 'mathjs';\nimport { includes, filter, last, intersection } from 'lodash';\n\nconst FormatDurationOutputIntervals = ['year', 'month', 'week', 'day', 'hour', 'minute', 'second'];\nexport default (durationTimestampInput, formatting) => {\n  const positive = Number(durationTimestampInput) >= 0;\n  const durationTimestamp = abs(Number(durationTimestampInput));\n  const intervals = intersection(\n    FormatDurationOutputIntervals,\n    filter(formatting.interval, interval => includes(FormatDurationOutputIntervals, interval)),\n  );\n  if (intervals.length === 0) {\n    return durationTimestamp;\n  }\n  const initVal = {\n    remainderDuration: moment.duration(durationTimestamp),\n    lastInterval: last(intervals),\n    formatting,\n    results: [],\n  };\n  const outputResult = intervals.reduce((acc, interval) => {\n    let selectedIntervalValue;\n    if (interval === acc.lastInterval) {\n      const availableIntervalDuration = acc.remainderDuration.as(interval);\n      if (acc.formatting.decimalPlaces === -1) {\n        selectedIntervalValue = Number(format(\n          availableIntervalDuration,\n          { notation: 'fixed', precision: 2 },\n        ));\n      } else if (acc.formatting.decimalPlaces === 0) {\n        selectedIntervalValue = round(availableIntervalDuration);\n      } else {\n        selectedIntervalValue = format(availableIntervalDuration, {\n          notation: 'fixed',\n          precision: acc.formatting.decimalPlaces,\n        });\n      }\n    } else {\n      selectedIntervalValue = floor(acc.remainderDuration.as(interval));\n    }\n    return {\n      ...acc,\n      remainderDuration: acc.remainderDuration.subtract(selectedIntervalValue, interval),\n      results: [\n        ...acc.results,\n        `${selectedIntervalValue} ${interval}`,\n      ],\n    };\n  }, initVal);\n  return positive ? outputResult.results.join(' ') : `-(${outputResult.results.join(' ')})`;\n};\n"]}