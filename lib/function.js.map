{"version":3,"sources":["../src/function.js"],"names":["_","filter","last","includes","intersection","moment","duration","utc","mathjs","abs","format","number","floor","round","FormatDurationOutputIntervals","generateFormattedDurationFromTimestamp","durationTimestampInput","formatting","positive","Number","durationTimestamp","intervals","interval","length","initVal","remainderDuration","lastInterval","results","outputResult","reduce","acc","selectedIntervalValue","availableIntervalDuration","as","decimalPlaces","notation","precision","subtract","join","insertThousandSeparators","value","separator","parts","toString","split","replace","formatNumber","columnType","formattedNumber","units","thousandSeparator","roundedValue","valueWithSeperators","prefix","postfix","e","Envisio","applyColumnFormat","columnValue","parseInt","Error"],"mappings":"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","file":"function.js","sourcesContent":["/* global Envisio, _, mathjs, moment */\n/* eslint-disable func-names */\nconst {\n  filter, last, includes,\n  intersection,\n} = _;\nconst { duration, utc } = moment;\nconst {\n  abs, format, number, floor, round,\n} = mathjs;\nconst FormatDurationOutputIntervals = ['year', 'month', 'week', 'day', 'hour', 'minute', 'second'];\nconst generateFormattedDurationFromTimestamp = (durationTimestampInput, formatting) => {\n  const positive = Number(durationTimestampInput) >= 0;\n  const durationTimestamp = abs(Number(durationTimestampInput));\n  const intervals = intersection(\n    FormatDurationOutputIntervals,\n    filter(formatting.interval, interval => includes(FormatDurationOutputIntervals, interval)),\n  );\n  if (intervals.length === 0) {\n    return durationTimestamp;\n  }\n  const initVal = {\n    remainderDuration: duration(durationTimestamp),\n    lastInterval: last(intervals),\n    formatting,\n    results: [],\n  };\n  const outputResult = intervals.reduce((acc, interval) => {\n    let selectedIntervalValue;\n    if (interval === acc.lastInterval) {\n      const availableIntervalDuration = acc.remainderDuration.as(interval);\n      if (acc.formatting.decimalPlaces === -1) {\n        selectedIntervalValue = Number(format(\n          availableIntervalDuration,\n          { notation: 'fixed', precision: 2 },\n        ));\n      } else if (acc.formatting.decimalPlaces === 0) {\n        selectedIntervalValue = round(availableIntervalDuration);\n      } else {\n        selectedIntervalValue = format(availableIntervalDuration, {\n          notation: 'fixed',\n          precision: acc.formatting.decimalPlaces,\n        });\n      }\n    } else {\n      selectedIntervalValue = floor(acc.remainderDuration.as(interval));\n    }\n    return {\n      ...acc,\n      remainderDuration: acc.remainderDuration.subtract(selectedIntervalValue, interval),\n      results: [\n        ...acc.results,\n        `${selectedIntervalValue} ${interval}`,\n      ],\n    };\n  }, initVal);\n  return positive ? outputResult.results.join(' ') : `-(${outputResult.results.join(' ')})`;\n};\nconst insertThousandSeparators = (value, separator) => {\n  const parts = value.toString().split('.');\n  parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, separator);\n  return parts.join('.');\n};\nconst formatNumber = (value, formatting, columnType) => {\n  let formattedNumber;\n  const {\n    units, decimalPlaces, thousandSeparator, interval,\n  } = formatting;\n  switch (columnType) {\n    case 'FORMULA_DURATION':\n      formattedNumber = generateFormattedDurationFromTimestamp(value, formatting);\n      break;\n    case 'DURATION':\n      formattedNumber = `${value} ${interval[0]}${value > 1 ? 's' : ''}`;\n      break;\n    default:\n      try {\n        const roundedValue = decimalPlaces > -1 ? format(number(value), {\n          notation: 'fixed',\n          precision: decimalPlaces,\n        }) : value;\n        const valueWithSeperators = thousandSeparator.length\n          ? roundedValue\n          : insertThousandSeparators(roundedValue, thousandSeparator);\n        formattedNumber = `${units.prefix}${valueWithSeperators}${units.postfix}`;\n      } catch (e) {\n        formattedNumber = value;\n      }\n      break;\n  }\n  return formattedNumber;\n};\nEnvisio.applyColumnFormat = Envisio.applyColumnFormat || function (value, {\n  columnType,\n  formatting,\n}) {\n  let columnValue;\n  if (value === '') {\n    columnValue = '';\n  } else if (value === 'ERROR') {\n    columnValue = 'ERROR';\n  } else {\n    switch (columnType) {\n      case 'DATE':\n        columnValue = utc(parseInt(value, 0)).format('ll');\n        break;\n      case 'DATETIME':\n        columnValue = utc(parseInt(value, 0)).format('MMM D, YYYY HH:mm:ss');\n        break;\n      case 'FORMULA_DATETIME':\n        columnValue = utc(parseInt(value, 0)).format('MMM D, YYYY HH:mm:ss');\n        break;\n      case 'SOURCE':\n        throw new Error('Cannot resolve columnType: SOURCE formatting');\n      case 'AGGREGATION_SOURCE':\n        columnValue = value;\n        break;\n      default:\n        columnValue = formatNumber(value, formatting, columnType);\n        break;\n    }\n  }\n  return columnValue;\n};\n"]}