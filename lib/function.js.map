{"version":3,"sources":["../src/function.js"],"names":["_","filter","last","includes","intersection","isEmpty","moment","duration","utc","mathjs","abs","format","number","floor","round","FormatDurationOutputIntervals","generateFormattedDurationFromTimestamp","durationTimestampInput","formatting","positive","Number","durationTimestamp","intervals","interval","length","initVal","remainderDuration","lastInterval","results","outputResult","reduce","acc","selectedIntervalValue","availableIntervalDuration","as","decimalPlaces","notation","precision","subtract","join","generateFormattedTime","selectedFormat","input","inputAsInt","parseInt","momentObj","isValid","insertThousandSeparators","value","separator","parts","toString","split","replace","formatNumber","columnType","formattedNumber","units","thousandSeparator","formattingOptions","Math","roundedValue","valueWithSeperators","prefix","postfix","e","Envisio","applyColumnFormat","columnValue","Error","newFormatting"],"mappings":";;;;;;AAAA;AACA;WAIIA,C;IAFFC,M,QAAAA,M;IAAQC,I,QAAAA,I;IAAMC,Q,QAAAA,Q;IACdC,Y,QAAAA,Y;IAAcC,O,QAAAA,O;cAEUC,M;IAAlBC,Q,WAAAA,Q;IAAUC,G,WAAAA,G;cAGdC,M;IADFC,G,WAAAA,G;IAAKC,M,WAAAA,M;IAAQC,M,WAAAA,M;IAAQC,K,WAAAA,K;IAAOC,K,WAAAA,K;;AAE9B,IAAMC,gCAAgC,CAAC,MAAD,EAAS,OAAT,EAAkB,MAAlB,EAA0B,KAA1B,EAAiC,MAAjC,EAAyC,QAAzC,EAAmD,QAAnD,CAAtC;AACA,IAAMC,yCAAyC,SAAzCA,sCAAyC,CAACC,sBAAD,EAAyBC,UAAzB,EAAwC;AACrF,MAAMC,WAAWC,OAAOH,sBAAP,KAAkC,CAAnD;AACA,MAAMI,oBAAoBX,IAAIU,OAAOH,sBAAP,CAAJ,CAA1B;AACA,MAAMK,YAAYlB,aAChBW,6BADgB,EAEhBd,OAAOiB,WAAWK,QAAlB,EAA4B;AAAA,WAAYpB,SAASY,6BAAT,EAAwCQ,QAAxC,CAAZ;AAAA,GAA5B,CAFgB,CAAlB;AAIA,MAAID,UAAUE,MAAV,KAAqB,CAAzB,EAA4B;AAC1B,WAAOH,iBAAP;AACD;AACD,MAAMI,UAAU;AACdC,uBAAmBnB,SAASc,iBAAT,CADL;AAEdM,kBAAczB,KAAKoB,SAAL,CAFA;AAGdJ,0BAHc;AAIdU,aAAS;AAJK,GAAhB;AAMA,MAAMC,eAAeP,UAAUQ,MAAV,CAAiB,UAACC,GAAD,EAAMR,QAAN,EAAmB;AACvD,QAAIS,8BAAJ;AACA,QAAIT,aAAaQ,IAAIJ,YAArB,EAAmC;AACjC,UAAMM,4BAA4BF,IAAIL,iBAAJ,CAAsBQ,EAAtB,CAAyBX,QAAzB,CAAlC;AACA,UAAIQ,IAAIb,UAAJ,CAAeiB,aAAf,KAAiC,CAAC,CAAtC,EAAyC;AACvCH,gCAAwBZ,OAAOT,OAC7BsB,yBAD6B,EAE7B,EAAEG,UAAU,OAAZ,EAAqBC,WAAW,CAAhC,EAF6B,CAAP,CAAxB;AAID,OALD,MAKO,IAAIN,IAAIb,UAAJ,CAAeiB,aAAf,KAAiC,CAArC,EAAwC;AAC7CH,gCAAwBlB,MAAMmB,yBAAN,CAAxB;AACD,OAFM,MAEA;AACLD,gCAAwBrB,OAAOsB,yBAAP,EAAkC;AACxDG,oBAAU,OAD8C;AAExDC,qBAAWN,IAAIb,UAAJ,CAAeiB;AAF8B,SAAlC,CAAxB;AAID;AACF,KAfD,MAeO;AACLH,8BAAwBnB,MAAMkB,IAAIL,iBAAJ,CAAsBQ,EAAtB,CAAyBX,QAAzB,CAAN,CAAxB;AACD;AACD,wBACKQ,GADL;AAEEL,yBAAmBK,IAAIL,iBAAJ,CAAsBY,QAAtB,CAA+BN,qBAA/B,EAAsDT,QAAtD,CAFrB;AAGEK,4CACKG,IAAIH,OADT,IAEKI,qBAFL,SAE8BT,QAF9B;AAHF;AAQD,GA5BoB,EA4BlBE,OA5BkB,CAArB;AA6BA,SAAON,WAAWU,aAAaD,OAAb,CAAqBW,IAArB,CAA0B,GAA1B,CAAX,UAAiDV,aAAaD,OAAb,CAAqBW,IAArB,CAA0B,GAA1B,CAAjD,MAAP;AACD,CA9CD;AA+CA,IAAMC,wBAAwB,SAAxBA,qBAAwB,CAACC,cAAD,EAAiBC,KAAjB,EAA2B;AACvD,MAAMC,aAAaC,SAASF,KAAT,EAAgB,EAAhB,CAAnB;AACA,MAAMG,YAAYvC,OAAOE,GAAP,CAAWmC,UAAX,EAAuB,GAAvB,CAAlB;AACA,MAAI,CAACE,UAAUC,OAAV,EAAL,EAA0B;AACxB,WAAOJ,KAAP;AACD;AACD,MAAID,mBAAmB,MAAvB,EAA+B;AAC7B,WAAOI,UAAUlC,MAAV,CAAiB,YAAjB,CAAP;AACD;AACD,SAAOkC,UAAUlC,MAAV,CAAiB,UAAjB,CAAP;AACD,CAVD;AAWA,IAAMoC,2BAA2B,SAA3BA,wBAA2B,CAACC,KAAD,EAAQC,SAAR,EAAsB;AACrD,MAAMC,QAAQF,MAAMG,QAAN,GAAiBC,KAAjB,CAAuB,GAAvB,CAAd;AACAF,QAAM,CAAN,IAAWA,MAAM,CAAN,EAASG,OAAT,CAAiB,uBAAjB,EAA0CJ,SAA1C,CAAX;AACA,SAAOC,MAAMX,IAAN,CAAW,GAAX,CAAP;AACD,CAJD;AAKA,IAAMe,eAAe,SAAfA,YAAe,CAACN,KAAD,EAAQ9B,UAAR,EAAoBqC,UAApB,EAAmC;AACtD,MAAIC,wBAAJ;AADsD,MAGpDC,KAHoD,GAIlDvC,UAJkD,CAGpDuC,KAHoD;AAAA,MAG7CtB,aAH6C,GAIlDjB,UAJkD,CAG7CiB,aAH6C;AAAA,MAG9BuB,iBAH8B,GAIlDxC,UAJkD,CAG9BwC,iBAH8B;AAAA,MAGXnC,QAHW,GAIlDL,UAJkD,CAGXK,QAHW;AAAA,MAGDkB,cAHC,GAIlDvB,UAJkD,CAGDuB,cAHC;;AAKtD,UAAQc,UAAR;AACE,SAAK,kBAAL;AACEC,wBAAkBxC,uCAAuCgC,KAAvC,EAA8C9B,UAA9C,CAAlB;AACA;AACF,SAAK,UAAL;AACE,UAAMyC,oBAAoB,EAAEvB,UAAU,OAAZ,EAAqBC,WAAWW,QAAQY,KAAK/C,KAAL,CAAWmC,KAAX,CAAR,KAA8B,CAA9B,GAAkC,CAAlC,GAAsC,CAAtE,EAA1B;AACAQ,wBAAqB7C,OAAOC,OAAOoC,KAAP,CAAP,EAAsBW,iBAAtB,CAArB,SAAiEpC,SAAS,CAAT,CAAjE,IAA+EyB,QAAQ,CAAR,GAAY,GAAZ,GAAkB,EAAjG;AACA;AACF,SAAK,MAAL;AACEQ,wBAAkBhB,sBAAsBC,cAAtB,EAAsCO,KAAtC,CAAlB;AACA;AACF;AACE,UAAIA,UAAU,OAAd,EAAuB;AACrB,YAAI;AACF,cAAIa,eAAe1B,gBAAgB,CAAC,CAAjB,GAAqBxB,OAAOC,OAAOoC,KAAP,CAAP,EAAsB;AAC5DZ,sBAAU,OADkD;AAE5DC,uBAAWF;AAFiD,WAAtB,CAArB,GAGda,KAHL;AAIA;AACA,cAAIb,kBAAkB,CAAtB,EAAyB;AACvB0B,2BAAeD,KAAK9C,KAAL,CAAW+C,YAAX,CAAf;AACD;AACD,cAAMC,sBAAsBzD,QAAQqD,iBAAR,IACxBG,YADwB,GAExBd,yBAAyBc,YAAzB,EAAuCH,iBAAvC,CAFJ;AAGAF,iCAAqBC,MAAMM,MAA3B,GAAoCD,mBAApC,GAA0DL,MAAMO,OAAhE;AACD,SAbD,CAaE,OAAOC,CAAP,EAAU;AACVT,4BAAkBR,KAAlB;AACD;AACF;AACD;AA9BJ;AAgCA,SAAOQ,eAAP;AACD,CAtCD;AAuCAU,QAAQC,iBAAR,GAA4BD,QAAQC,iBAAR,IAA6B,UAAUnB,KAAV,SAG9B;AAAA,MAFzBO,UAEyB,SAFzBA,UAEyB;AAAA,MADzBrC,UACyB,SADzBA,UACyB;AAAA,MAAxByC,iBAAwB,uEAAJ,EAAI;;AACzB,MAAIS,oBAAJ;AACA,MAAIpB,UAAU,EAAd,EAAkB;AAChBoB,kBAAc,EAAd;AACD,GAFD,MAEO,IAAIpB,UAAU,OAAd,EAAuB;AAC5BoB,kBAAc,OAAd;AACD,GAFM,MAEA;AACL,YAAQb,UAAR;AACE,WAAK,MAAL;AACEa,sBAAc5D,IAAIoC,SAASI,KAAT,EAAgB,CAAhB,CAAJ,EAAwBrC,MAAxB,CAA+B,IAA/B,CAAd;AACA;AACF,WAAK,UAAL;AACEyD,sBAAc5D,IAAIoC,SAASI,KAAT,EAAgB,CAAhB,CAAJ,EAAwBrC,MAAxB,CAA+B,sBAA/B,CAAd;AACA;AACF,WAAK,kBAAL;AACEyD,sBAAc5D,IAAIoC,SAASI,KAAT,EAAgB,CAAhB,CAAJ,EAAwBrC,MAAxB,CAA+B,sBAA/B,CAAd;AACA;AACF,WAAK,QAAL;AACE,cAAM,IAAI0D,KAAJ,CAAU,8CAAV,CAAN;AACF,WAAK,oBAAL;AACED,sBAAcpB,KAAd;AACA;AACF;AACE,YAAMsB,6BAAqBpD,UAArB,EAAoCyC,iBAApC,CAAN;AACAS,sBAAcd,aAAaN,KAAb,EAAoBsB,aAApB,EAAmCf,UAAnC,CAAd;AACA;AAlBJ;AAoBD;AACD,SAAOa,WAAP;AACD,CAhCD","file":"function.js","sourcesContent":["/* global Envisio, _, mathjs, moment */\n/* eslint-disable func-names */\nconst {\n  filter, last, includes,\n  intersection, isEmpty,\n} = _;\nconst { duration, utc } = moment;\nconst {\n  abs, format, number, floor, round,\n} = mathjs;\nconst FormatDurationOutputIntervals = ['year', 'month', 'week', 'day', 'hour', 'minute', 'second'];\nconst generateFormattedDurationFromTimestamp = (durationTimestampInput, formatting) => {\n  const positive = Number(durationTimestampInput) >= 0;\n  const durationTimestamp = abs(Number(durationTimestampInput));\n  const intervals = intersection(\n    FormatDurationOutputIntervals,\n    filter(formatting.interval, interval => includes(FormatDurationOutputIntervals, interval)),\n  );\n  if (intervals.length === 0) {\n    return durationTimestamp;\n  }\n  const initVal = {\n    remainderDuration: duration(durationTimestamp),\n    lastInterval: last(intervals),\n    formatting,\n    results: [],\n  };\n  const outputResult = intervals.reduce((acc, interval) => {\n    let selectedIntervalValue;\n    if (interval === acc.lastInterval) {\n      const availableIntervalDuration = acc.remainderDuration.as(interval);\n      if (acc.formatting.decimalPlaces === -1) {\n        selectedIntervalValue = Number(format(\n          availableIntervalDuration,\n          { notation: 'fixed', precision: 2 },\n        ));\n      } else if (acc.formatting.decimalPlaces === 0) {\n        selectedIntervalValue = round(availableIntervalDuration);\n      } else {\n        selectedIntervalValue = format(availableIntervalDuration, {\n          notation: 'fixed',\n          precision: acc.formatting.decimalPlaces,\n        });\n      }\n    } else {\n      selectedIntervalValue = floor(acc.remainderDuration.as(interval));\n    }\n    return {\n      ...acc,\n      remainderDuration: acc.remainderDuration.subtract(selectedIntervalValue, interval),\n      results: [\n        ...acc.results,\n        `${selectedIntervalValue} ${interval}`,\n      ],\n    };\n  }, initVal);\n  return positive ? outputResult.results.join(' ') : `-(${outputResult.results.join(' ')})`;\n};\nconst generateFormattedTime = (selectedFormat, input) => {\n  const inputAsInt = parseInt(input, 10);\n  const momentObj = moment.utc(inputAsInt, 'x');\n  if (!momentObj.isValid()) {\n    return input;\n  }\n  if (selectedFormat === '12HR') {\n    return momentObj.format('hh:mm:ss a');\n  }\n  return momentObj.format('HH:mm:ss');\n};\nconst insertThousandSeparators = (value, separator) => {\n  const parts = value.toString().split('.');\n  parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, separator);\n  return parts.join('.');\n};\nconst formatNumber = (value, formatting, columnType) => {\n  let formattedNumber;\n  const {\n    units, decimalPlaces, thousandSeparator, interval, selectedFormat,\n  } = formatting;\n  switch (columnType) {\n    case 'FORMULA_DURATION':\n      formattedNumber = generateFormattedDurationFromTimestamp(value, formatting);\n      break;\n    case 'DURATION':\n      const formattingOptions = { notation: 'fixed', precision: value - Math.floor(value) !== 0 ? 2 : 0 };\n      formattedNumber = `${format(number(value), formattingOptions)} ${interval[0]}${value > 1 ? 's' : ''}`;\n      break;\n    case 'TIME':\n      formattedNumber = generateFormattedTime(selectedFormat, value);\n      break;\n    default:\n      if (value !== 'ERROR') {\n        try {\n          let roundedValue = decimalPlaces > -1 ? format(number(value), {\n            notation: 'fixed',\n            precision: decimalPlaces,\n          }) : value;\n          // precision: 0 does return a properly formatted number so use Math.round to fix it\n          if (decimalPlaces === 0) {\n            roundedValue = Math.round(roundedValue);\n          }\n          const valueWithSeperators = isEmpty(thousandSeparator)\n            ? roundedValue\n            : insertThousandSeparators(roundedValue, thousandSeparator);\n          formattedNumber = `${units.prefix}${valueWithSeperators}${units.postfix}`;\n        } catch (e) {\n          formattedNumber = value;\n        }\n      }\n      break;\n  }\n  return formattedNumber;\n};\nEnvisio.applyColumnFormat = Envisio.applyColumnFormat || function (value, {\n  columnType,\n  formatting,\n}, formattingOptions = {}) {\n  let columnValue;\n  if (value === '') {\n    columnValue = '';\n  } else if (value === 'ERROR') {\n    columnValue = 'ERROR';\n  } else {\n    switch (columnType) {\n      case 'DATE':\n        columnValue = utc(parseInt(value, 0)).format('ll');\n        break;\n      case 'DATETIME':\n        columnValue = utc(parseInt(value, 0)).format('MMM D, YYYY HH:mm:ss');\n        break;\n      case 'FORMULA_DATETIME':\n        columnValue = utc(parseInt(value, 0)).format('MMM D, YYYY HH:mm:ss');\n        break;\n      case 'SOURCE':\n        throw new Error('Cannot resolve columnType: SOURCE formatting');\n      case 'AGGREGATION_SOURCE':\n        columnValue = value;\n        break;\n      default:\n        const newFormatting = { ...formatting, ...formattingOptions };\n        columnValue = formatNumber(value, newFormatting, columnType);\n        break;\n    }\n  }\n  return columnValue;\n};\n"]}