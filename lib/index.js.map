{"version":3,"sources":["../src/index.js"],"names":["applyColumnFormat","module","exports","window","Envisio","FormatDurationOutputIntervals","generateFormattedDurationFromTimestamp","durationTimestampInput","formatting","positive","Number","durationTimestamp","intervals","interval","length","initVal","remainderDuration","lastInterval","results","outputResult","reduce","acc","selectedIntervalValue","availableIntervalDuration","as","decimalPlaces","notation","precision","subtract","join","insertThousandSeparators","value","separator","parts","toString","split","replace","formatNumber","columnType","formattedNumber","units","thousandSeparator","roundedValue","valueWithSeperators","prefix","postfix","e","columnValue","parseInt","format","Error"],"mappings":"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","file":"index.js","sourcesContent":["/* global window */\n/* eslint-disable func-names */\nimport { duration, utc } from 'moment';\nimport format from 'mathjs/lib/function/string/format';\nimport number from 'mathjs/lib/type/number';\nimport floor from 'mathjs/lib/function/arithmetic/floor';\nimport round from 'mathjs/lib/function/arithmetic/round';\nimport abs from 'mathjs/lib/function/arithmetic/abs';\nimport includes from 'lodash/includes';\nimport filter from 'lodash/filter';\nimport last from 'lodash/last';\nimport intersection from 'lodash/intersection';\n\n(function (applyColumnFormat) {\n  if (typeof module !== 'undefined') {\n    module.exports = applyColumnFormat();\n  } else {\n    window.Envisio = window.Envisio || {};\n    window.Envisio.applyColumnFormat = window.Envisio.applyColumnFormat\n      || applyColumnFormat();\n  }\n}(() => {\n  const FormatDurationOutputIntervals = ['year', 'month', 'week', 'day', 'hour', 'minute', 'second'];\n  const generateFormattedDurationFromTimestamp = (durationTimestampInput, formatting) => {\n    const positive = Number(durationTimestampInput) >= 0;\n    const durationTimestamp = abs(Number(durationTimestampInput));\n    const intervals = intersection(\n      FormatDurationOutputIntervals,\n      filter(formatting.interval, interval => includes(FormatDurationOutputIntervals, interval)),\n    );\n    if (intervals.length === 0) {\n      return durationTimestamp;\n    }\n    const initVal = {\n      remainderDuration: duration(durationTimestamp),\n      lastInterval: last(intervals),\n      formatting,\n      results: [],\n    };\n    const outputResult = intervals.reduce((acc, interval) => {\n      let selectedIntervalValue;\n      if (interval === acc.lastInterval) {\n        const availableIntervalDuration = acc.remainderDuration.as(interval);\n        if (acc.formatting.decimalPlaces === -1) {\n          selectedIntervalValue = Number(format(\n            availableIntervalDuration,\n            { notation: 'fixed', precision: 2 },\n          ));\n        } else if (acc.formatting.decimalPlaces === 0) {\n          selectedIntervalValue = round(availableIntervalDuration);\n        } else {\n          selectedIntervalValue = format(availableIntervalDuration, {\n            notation: 'fixed',\n            precision: acc.formatting.decimalPlaces,\n          });\n        }\n      } else {\n        selectedIntervalValue = floor(acc.remainderDuration.as(interval));\n      }\n      return {\n        ...acc,\n        remainderDuration: acc.remainderDuration.subtract(selectedIntervalValue, interval),\n        results: [\n          ...acc.results,\n          `${selectedIntervalValue} ${interval}`,\n        ],\n      };\n    }, initVal);\n    return positive ? outputResult.results.join(' ') : `-(${outputResult.results.join(' ')})`;\n  };\n  const insertThousandSeparators = (value, separator) => {\n    const parts = value.toString().split('.');\n    parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, separator);\n    return parts.join('.');\n  };\n  const formatNumber = (value, formatting, columnType) => {\n    let formattedNumber;\n    const {\n      units, decimalPlaces, thousandSeparator, interval,\n    } = formatting;\n    switch (columnType) {\n      case 'FORMULA_DURATION':\n        formattedNumber = generateFormattedDurationFromTimestamp(value, formatting);\n        break;\n      case 'DURATION':\n        formattedNumber = `${value} ${interval[0]}${value > 1 ? 's' : ''}`;\n        break;\n      default:\n        try {\n          const roundedValue = decimalPlaces > -1 ? format(number(value), {\n            notation: 'fixed',\n            precision: decimalPlaces,\n          }) : value;\n          const valueWithSeperators = thousandSeparator.length\n            ? roundedValue\n            : insertThousandSeparators(roundedValue, thousandSeparator);\n          formattedNumber = `${units.prefix}${valueWithSeperators}${units.postfix}`;\n        } catch (e) {\n          formattedNumber = value;\n        }\n        break;\n    }\n    return formattedNumber;\n  };\n  return (value, { columnType, formatting }) => {\n    let columnValue;\n    if (value === '') {\n      columnValue = '';\n    } else if (value === 'ERROR') {\n      columnValue = 'ERROR';\n    } else {\n      switch (columnType) {\n        case 'DATE':\n          columnValue = utc(parseInt(value, 0)).format('ll');\n          break;\n        case 'DATETIME':\n          columnValue = utc(parseInt(value, 0)).format('MMM D, YYYY HH:mm:ss');\n          break;\n        case 'FORMULA_DATETIME':\n          columnValue = utc(parseInt(value, 0)).format('MMM D, YYYY HH:mm:ss');\n          break;\n        case 'SOURCE':\n          throw new Error('Cannot resolve columnType: SOURCE formatting');\n        case 'AGGREGATION_SOURCE':\n          columnValue = value;\n          break;\n        default:\n          columnValue = formatNumber(value, formatting, columnType);\n          break;\n      }\n    }\n    return columnValue;\n  };\n}));\n"]}