{"version":3,"sources":["../src/index.js"],"names":["insertThousandSeparators","value","separator","parts","toString","split","replace","join","formatNumber","formatting","columnType","formattedNumber","units","decimalPlaces","thousandSeparator","interval","roundedValue","notation","precision","valueWithSeperators","prefix","postfix","e","module","exports","columnValue","moment","utc","parseInt","format","Error"],"mappings":";;AAAA;;;;AACA;;AACA;;AACA;;;;;;AAEA,IAAMA,2BAA2B,SAA3BA,wBAA2B,CAACC,KAAD,EAAQC,SAAR,EAAsB;AACrD,MAAMC,QAAQF,MAAMG,QAAN,GAAiBC,KAAjB,CAAuB,GAAvB,CAAd;AACAF,QAAM,CAAN,IAAWA,MAAM,CAAN,EAASG,OAAT,CAAiB,uBAAjB,EAA0CJ,SAA1C,CAAX;AACA,SAAOC,MAAMI,IAAN,CAAW,GAAX,CAAP;AACD,CAJD;AAKA,IAAMC,eAAe,SAAfA,YAAe,CAACP,KAAD,EAAQQ,UAAR,EAAoBC,UAApB,EAAmC;AACtD,MAAIC,wBAAJ;AADsD,MAGpDC,KAHoD,GAIlDH,UAJkD,CAGpDG,KAHoD;AAAA,MAG7CC,aAH6C,GAIlDJ,UAJkD,CAG7CI,aAH6C;AAAA,MAG9BC,iBAH8B,GAIlDL,UAJkD,CAG9BK,iBAH8B;AAAA,MAGXC,QAHW,GAIlDN,UAJkD,CAGXM,QAHW;;AAKtD,UAAQL,UAAR;AACE,SAAK,kBAAL;AACEC,wBAAkB,yCAAuCV,KAAvC,EAA8CQ,UAA9C,CAAlB;AACA;AACF,SAAK,UAAL;AACEE,wBAAqBV,KAArB,SAA8Bc,SAAS,CAAT,CAA9B,IAA4Cd,QAAQ,CAAR,GAAY,GAAZ,GAAkB,EAA9D;AACA;AACF;AACE,UAAI;AACF,YAAMe,eAAeH,gBAAgB,CAAC,CAAjB,GAAqB,oBAAO,oBAAOZ,KAAP,CAAP,EAAsB;AAC9DgB,oBAAU,OADoD;AAE9DC,qBAAWL;AAFmD,SAAtB,CAArB,GAGhBZ,KAHL;AAIA,YAAMkB,sBAAsB,qBAAQL,iBAAR,IACxBE,YADwB,GAExBhB,yBAAyBgB,YAAzB,EAAuCF,iBAAvC,CAFJ;AAGAH,+BAAqBC,MAAMQ,MAA3B,GAAoCD,mBAApC,GAA0DP,MAAMS,OAAhE;AACD,OATD,CASE,OAAOC,CAAP,EAAU;AACVX,0BAAkBV,KAAlB;AACD;AACD;AApBJ;AAsBA,SAAOU,eAAP;AACD,CA5BD;AA6BA;;;;;AAKAY,OAAOC,OAAP,GAAiB,UAACvB,KAAD,QAAuC;AAAA,MAA7BS,UAA6B,QAA7BA,UAA6B;AAAA,MAAjBD,UAAiB,QAAjBA,UAAiB;;AACtD,MAAIgB,oBAAJ;AACA,MAAIxB,UAAU,EAAd,EAAkB;AAChBwB,kBAAc,EAAd;AACD,GAFD,MAEO,IAAIxB,UAAU,OAAd,EAAuB;AAC5BwB,kBAAc,OAAd;AACD,GAFM,MAEA;AACL,YAAQf,UAAR;AACE,WAAK,MAAL;AACEe,sBAAcC,iBAAOC,GAAP,CAAWC,SAAS3B,KAAT,EAAgB,CAAhB,CAAX,EAA+B4B,MAA/B,CAAsC,IAAtC,CAAd;AACA;AACF,WAAK,UAAL;AACEJ,sBAAcC,iBAAOC,GAAP,CAAWC,SAAS3B,KAAT,EAAgB,CAAhB,CAAX,EAA+B4B,MAA/B,CAAsC,sBAAtC,CAAd;AACA;AACF,WAAK,kBAAL;AACEJ,sBAAcC,iBAAOC,GAAP,CAAWC,SAAS3B,KAAT,EAAgB,CAAhB,CAAX,EAA+B4B,MAA/B,CAAsC,sBAAtC,CAAd;AACA;AACF,WAAK,QAAL;AACE,cAAM,IAAIC,KAAJ,CAAU,8CAAV,CAAN;AACF,WAAK,oBAAL;AACEL,sBAAcxB,KAAd;AACA;AACF;AACEwB,sBAAcjB,aAAaP,KAAb,EAAoBQ,UAApB,EAAgCC,UAAhC,CAAd;AACA;AAjBJ;AAmBD;AACD,SAAOe,WAAP;AACD,CA5BD","file":"index.js","sourcesContent":["import moment from 'moment';\nimport { format, number } from 'mathjs';\nimport { isEmpty } from 'lodash';\nimport generateFormattedDurationFromTimestamp from './util/generate_formatted_output';\n\nconst insertThousandSeparators = (value, separator) => {\n  const parts = value.toString().split('.');\n  parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, separator);\n  return parts.join('.');\n};\nconst formatNumber = (value, formatting, columnType) => {\n  let formattedNumber;\n  const {\n    units, decimalPlaces, thousandSeparator, interval,\n  } = formatting;\n  switch (columnType) {\n    case 'FORMULA_DURATION':\n      formattedNumber = generateFormattedDurationFromTimestamp(value, formatting);\n      break;\n    case 'DURATION':\n      formattedNumber = `${value} ${interval[0]}${value > 1 ? 's' : ''}`;\n      break;\n    default:\n      try {\n        const roundedValue = decimalPlaces > -1 ? format(number(value), {\n          notation: 'fixed',\n          precision: decimalPlaces,\n        }) : value;\n        const valueWithSeperators = isEmpty(thousandSeparator)\n          ? roundedValue\n          : insertThousandSeparators(roundedValue, thousandSeparator);\n        formattedNumber = `${units.prefix}${valueWithSeperators}${units.postfix}`;\n      } catch (e) {\n        formattedNumber = value;\n      }\n      break;\n  }\n  return formattedNumber;\n};\n/**\n * @param {String} value\n * @param {Object} columnType\n * @returns {String}\n */\nmodule.exports = (value, { columnType, formatting }) => {\n  let columnValue;\n  if (value === '') {\n    columnValue = '';\n  } else if (value === 'ERROR') {\n    columnValue = 'ERROR';\n  } else {\n    switch (columnType) {\n      case 'DATE':\n        columnValue = moment.utc(parseInt(value, 0)).format('ll');\n        break;\n      case 'DATETIME':\n        columnValue = moment.utc(parseInt(value, 0)).format('MMM D, YYYY HH:mm:ss');\n        break;\n      case 'FORMULA_DATETIME':\n        columnValue = moment.utc(parseInt(value, 0)).format('MMM D, YYYY HH:mm:ss');\n        break;\n      case 'SOURCE':\n        throw new Error('Cannot resolve columnType: SOURCE formatting');\n      case 'AGGREGATION_SOURCE':\n        columnValue = value;\n        break;\n      default:\n        columnValue = formatNumber(value, formatting, columnType);\n        break;\n    }\n  }\n  return columnValue;\n};\n"]}